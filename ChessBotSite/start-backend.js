#!/usr/bin/env node

const { exec, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ D√©marrage du backend ChessBot...\n');

// V√©rification des pr√©requis
const checkRequirements = () => {
    console.log('üîç V√©rification des pr√©requis...');

    // V√©rifier node_modules
    if (!fs.existsSync('node_modules')) {
        console.log('‚ùå node_modules manquant');
        console.log('üí° Lancez: npm install');
        return false;
    }

    // V√©rifier si le client Prisma existe
    if (!fs.existsSync('node_modules/.prisma') && !fs.existsSync('prisma/dev.db')) {
        console.log('‚ùå Base de donn√©es non configur√©e');
        console.log('üí° Lancez: npm run setup');
        return false;
    }

    console.log('‚úÖ Pr√©requis v√©rifi√©s');
    return true;
};

// V√©rifier si le port est libre
const checkPort = (port) => {
    return new Promise((resolve) => {
        const net = require('net');
        const server = net.createServer();

        server.listen(port, () => {
            server.once('close', () => {
                resolve(true);
            });
            server.close();
        });

        server.on('error', () => {
            resolve(false);
        });
    });
};

// Fonction principale
const startBackend = async () => {
    try {
        // V√©rifier les pr√©requis
        if (!checkRequirements()) {
            process.exit(1);
        }

        // V√©rifier le port 5000
        console.log('üîç V√©rification du port 5000...');
        const portFree = await checkPort(5000);
        if (!portFree) {
            console.log('‚ùå Le port 5000 est d√©j√† utilis√©');
            console.log('üí° Fermez l\'application qui utilise ce port ou changez le port');

            // Tenter de trouver qui utilise le port
            exec('netstat -ano | findstr :5000', (error, stdout) => {
                if (stdout) {
                    console.log('üìã Processus utilisant le port 5000:');
                    console.log(stdout);
                }
            });

            process.exit(1);
        }
        console.log('‚úÖ Port 5000 disponible');

        // D√©marrer le serveur
        console.log('üöÄ D√©marrage du serveur backend...\n');

        const serverProcess = spawn('npx', ['tsx', 'src/server/server.ts'], {
            stdio: 'inherit',
            shell: true
        });

        // Gestion des signaux
        process.on('SIGINT', () => {
            console.log('\nüõë Arr√™t du serveur...');
            serverProcess.kill('SIGINT');
            process.exit(0);
        });

        serverProcess.on('error', (error) => {
            console.error('‚ùå Erreur d√©marrage serveur:', error.message);

            if (error.message.includes('tsx')) {
                console.log('üí° tsx non trouv√©. Installation...');
                exec('npm install tsx --save-dev', (error) => {
                    if (!error) {
                        console.log('‚úÖ tsx install√©. Relancez le script.');
                    }
                });
            }
        });

        serverProcess.on('exit', (code) => {
            if (code !== 0) {
                console.log(`‚ùå Le serveur s'est arr√™t√© avec le code ${code}`);
                console.log('\nüîß Solutions possibles:');
                console.log('   - V√©rifiez les logs ci-dessus pour les erreurs');
                console.log('   - Lancez: npm install');
                console.log('   - Lancez: npm run setup');
                console.log('   - V√©rifiez que le port 5000 est libre');
            }
        });

    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
        process.exit(1);
    }
};

startBackend(); 