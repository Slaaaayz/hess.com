// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model APIKeys {
  id        Int      @id @default(autoincrement())
  api_key   String   @unique
  is_valid  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id   Int?
  user      User?    @relation(fields: [user_id], references: [id])
}

model User {
  id                 Int       @id @default(autoincrement())
  username          String    @unique
  email             String    @unique
  password          String
  role              String    @default("user") // "user" ou "admin"
  subscriptionEndDate DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  settings          UserSettings?
  api_keys          APIKeys[]
  apiKeys           ApiKey[]
}

// Les validations suivantes seront gérées au niveau de l'application:
// - skillLevel doit être entre 0 et 3000
// - searchDepth doit être entre 1 et 20
model UserSettings {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  skillLevel  Int      @default(1500)
  searchDepth Int      @default(3)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  userId    Int
  keyValue  String   @unique
  name      String   @default("Default API Key")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([keyValue])
}
